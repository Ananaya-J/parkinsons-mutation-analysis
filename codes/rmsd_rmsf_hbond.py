import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns

class MDAnalysis:
    def __init__(self, rmsd_file, rmsf_file, hbond_file):
        """
        Initialize MD Analysis with trajectory data files
        
        Parameters:
        -----------
        rmsd_file : str
            Path to RMSD XVG file
        rmsf_file : str
            Path to RMSF XVG file
        hbond_file : str
            Path to hydrogen bond XVG file
        """
        self.rmsd_data = self.read_xvg(rmsd_file)
        self.rmsf_data = self.read_xvg(rmsf_file)
        self.hbond_data = self.read_xvg(hbond_file)
    
    def read_xvg(self, filename):
        """
        Read XVG files generated by GROMACS
        
        Parameters:
        -----------
        filename : str
            Path to XVG file
        
        Returns:
        --------
        numpy.ndarray
            Parsed data from the XVG file
        """
        data = []
        with open(filename, 'r') as f:
            for line in f:
                if not line.startswith('@') and not line.startswith('#'):
                    data.append([float(x) for x in line.split()])
        return np.array(data)
    
    def plot_rmsd(self):
        """
        Plot Root Mean Square Deviation over time
        """
        plt.figure(figsize=(10, 5))
        plt.plot(self.rmsd_data[:, 0], self.rmsd_data[:, 1], label='RMSD')
        plt.title('Protein Backbone RMSD')
        plt.xlabel('Time (ns)')
        plt.ylabel('RMSD (Å)')
        plt.legend()
        plt.tight_layout()
        plt.show()
    
    def plot_rmsf(self):
        """
        Plot Root Mean Square Fluctuation per residue
        """
        plt.figure(figsize=(12, 5))
        plt.plot(self.rmsf_data[:, 0], self.rmsf_data[:, 1])
        plt.title('Protein Backbone RMSF')
        plt.xlabel('Residue Number')
        plt.ylabel('RMSF (Å)')
        plt.tight_layout()
        plt.show()
    
    def plot_hbonds(self):
        """
        Plot Hydrogen Bond Analysis
        """
        plt.figure(figsize=(10, 5))
        plt.plot(self.hbond_data[:, 0], self.hbond_data[:, 1])
        plt.title('Hydrogen Bonds Over Time')
        plt.xlabel('Time (ns)')
        plt.ylabel('Number of Hydrogen Bonds')
        plt.tight_layout()
        plt.show()
    
    def comprehensive_analysis(self):
        """
        Perform comprehensive visualization of MD simulation data
        """
        plt.figure(figsize=(15, 10))
        
        # RMSD Subplot
        plt.subplot(2, 2, 1)
        plt.plot(self.rmsd_data[:, 0], self.rmsd_data[:, 1])
        plt.title('RMSD')
        plt.xlabel('Time (ns)')
        plt.ylabel('RMSD (Å)')
        
        # RMSF Subplot
        plt.subplot(2, 2, 2)
        plt.plot(self.rmsf_data[:, 0], self.rmsf_data[:, 1])
        plt.title('RMSF')
        plt.xlabel('Residue Number')
        plt.ylabel('RMSF (Å)')
        
        # Hydrogen Bonds Subplot
        plt.subplot(2, 2, 3)
        plt.plot(self.hbond_data[:, 0], self.hbond_data[:, 1])
        plt.title('Hydrogen Bonds')
        plt.xlabel('Time (ns)')
        plt.ylabel('Number of Bonds')
        
        plt.tight_layout()
        plt.show()

# Example Usage
def main():
    analysis = MDAnalysis(
        rmsd_file='rmsd.xvg', 
        rmsf_file='rmsf.xvg', 
        hbond_file='hbond_num.xvg'
    )
    
    # Uncomment the analysis method you want to use
    # analysis.plot_rmsd()
    # analysis.plot_rmsf()
    # analysis.plot_hbonds()
    analysis.comprehensive_analysis()

if __name__ == "__main__":
    main()
